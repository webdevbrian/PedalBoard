{"version":3,"sources":["../src/utils/EventEmitter.ts","../src/io/Input.ts","../src/io/FileInput.ts","../src/io/StreamInput.ts","../src/io/Output.ts","../src/core/Stage.ts","../src/core/ConnectableModel.ts","../src/core/Connectable.ts","../src/core/Board.ts","../src/pedals/BoxModel.ts","../src/controls/pots/Pot.ts","../src/controls/pots/LinearPot.ts","../src/controls/switches/Switch.ts","../src/controls/switches/ToggleSwitch.ts","../src/controls/Led.ts","../src/pedals/Box.ts","../src/pedals/overdrive/OverdriveModel.ts","../src/controls/pots/LogPot.ts","../src/pedals/overdrive/Overdrive.ts","../src/pedals/delay/DelayModel.ts","../src/pedals/delay/Delay.ts","../src/pedals/reverb/ReverbModel.ts","../src/pedals/reverb/Reverb.ts","../src/pedals/volume/VolumeModel.ts","../src/pedals/volume/Volume.ts","../src/pedals/cabinet/CabinetModel.ts","../src/pedals/cabinet/Cabinet.ts","../src/controls/switches/MomentarySwitch.ts","../src/index.ts"],"names":["EventEmitter","__publicField","event","listener","listeners","args","error","onceListener","Input","context","destination","value","FileInput","url","arrayBuffer","file","when","offset","time","wasPlaying","loop","StreamInput","autoStart","track","dataArray","sum","i","constraints","device","deviceId","Output","_prev","enabled","params","max","Stage","board","fileInput","resolve","reject","streamInput","input","ConnectableModel","prev","chain","node","e","Connectable","ModelClass","component","Board","pedals","pedal","index","fromIndex","toIndex","pot","BoxModel","newLevel","effect","Pot","handlerOrParam","name","multiplier","min","normalizedValue","oldValue","LinearPot","Switch","defaultState","state","nodes","nodeSet","activeNode","inputNode","bypassNode","ToggleSwitch","Led","switchControl","Box","bypassed","OverdriveModel","amount","k","nSamples","curve","deg","x","LogPot","minLog","maxLog","logValue","scaledValue","Overdrive","DelayModel","mix","Delay","ReverbModel","duration","decay","brightness","length","impulse","channel","channelData","sample","size","audioBuffer","Reverb","VolumeModel","Volume","CabinetModel","type","Cabinet","MomentarySwitch","index_default"],"mappings":"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","file":"index.js","sourcesContent":["/**\n * Simple EventEmitter implementation for TypeScript\n */\n\ntype EventListener = (...args: any[]) => void;\n\nexport class EventEmitter {\n  private events: Map<string, Set<EventListener>> = new Map();\n\n  on(event: string, listener: EventListener): this {\n    if (!this.events.has(event)) {\n      this.events.set(event, new Set());\n    }\n    this.events.get(event)!.add(listener);\n    return this;\n  }\n\n  off(event: string, listener: EventListener): this {\n    const listeners = this.events.get(event);\n    if (listeners) {\n      listeners.delete(listener);\n      if (listeners.size === 0) {\n        this.events.delete(event);\n      }\n    }\n    return this;\n  }\n\n  emit(event: string, ...args: any[]): this {\n    const listeners = this.events.get(event);\n    if (listeners) {\n      listeners.forEach(listener => {\n        try {\n          listener(...args);\n        } catch (error) {\n          console.error(`Error in event listener for ${event}:`, error);\n        }\n      });\n    }\n    return this;\n  }\n\n  once(event: string, listener: EventListener): this {\n    const onceListener = (...args: any[]) => {\n      this.off(event, onceListener);\n      listener(...args);\n    };\n    return this.on(event, onceListener);\n  }\n\n  removeAllListeners(event?: string): this {\n    if (event) {\n      this.events.delete(event);\n    } else {\n      this.events.clear();\n    }\n    return this;\n  }\n\n  listenerCount(event: string): number {\n    const listeners = this.events.get(event);\n    return listeners ? listeners.size : 0;\n  }\n\n  // Aliases for compatibility\n  addEventListener = this.on;\n  removeEventListener = this.off;\n  dispatchEvent = this.emit;\n}\n","/**\n * Base input class for audio sources\n */\n\nimport { EventEmitter } from '../utils/EventEmitter';\n\nexport class Input extends EventEmitter {\n  protected context: AudioContext;\n  protected outputNode: GainNode;\n  protected source?: AudioNode;\n  protected isPlaying: boolean = false;\n\n  constructor(context: AudioContext) {\n    super();\n    this.context = context;\n    this.outputNode = this.context.createGain();\n  }\n\n  /**\n   * Connects the input to a destination\n   */\n  connect(destination: AudioNode | { getInput(): AudioNode }): void {\n    if ('getInput' in destination) {\n      this.outputNode.connect(destination.getInput());\n    } else {\n      this.outputNode.connect(destination);\n    }\n  }\n\n  /**\n   * Disconnects the input\n   */\n  disconnect(): void {\n    try {\n      this.outputNode.disconnect();\n    } catch (e) {\n      // Already disconnected\n    }\n  }\n\n  /**\n   * Starts playing the input\n   */\n  play(): void {\n    this.isPlaying = true;\n    this.emit('play');\n  }\n\n  /**\n   * Stops playing the input\n   */\n  stop(): void {\n    this.isPlaying = false;\n    this.emit('stop');\n  }\n\n  /**\n   * Gets the output node\n   */\n  getOutput(): AudioNode {\n    return this.outputNode;\n  }\n\n  /**\n   * Checks if input is playing\n   */\n  getIsPlaying(): boolean {\n    return this.isPlaying;\n  }\n\n  /**\n   * Sets the volume of the input\n   */\n  setVolume(value: number): void {\n    value = Math.max(0, Math.min(1, value));\n    this.outputNode.gain.value = value;\n  }\n\n  /**\n   * Gets the volume of the input\n   */\n  getVolume(): number {\n    return this.outputNode.gain.value;\n  }\n\n  /**\n   * Disposes of the input\n   */\n  dispose(): void {\n    this.stop();\n    this.disconnect();\n    this.removeAllListeners();\n  }\n}\n","/**\n * File input for playing audio files\n */\n\nimport { Input } from './Input';\n\nexport class FileInput extends Input {\n  private buffer?: AudioBuffer;\n  private bufferSource?: AudioBufferSourceNode;\n  private startTime: number = 0;\n  private pauseTime: number = 0;\n\n  constructor(context: AudioContext, url?: string) {\n    super(context);\n    if (url) {\n      this.loadFile(url);\n    }\n  }\n\n  /**\n   * Loads an audio file from URL\n   */\n  async loadFile(url: string): Promise<void> {\n    this.emit('loading');\n    \n    try {\n      const response = await fetch(url);\n      const arrayBuffer = await response.arrayBuffer();\n      this.buffer = await this.context.decodeAudioData(arrayBuffer);\n      this.emit('loaded', this.buffer);\n    } catch (error) {\n      console.error('Failed to load audio file:', error);\n      this.emit('error', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Loads audio from an ArrayBuffer\n   */\n  async loadArrayBuffer(arrayBuffer: ArrayBuffer): Promise<void> {\n    this.emit('loading');\n    \n    try {\n      this.buffer = await this.context.decodeAudioData(arrayBuffer);\n      this.emit('loaded', this.buffer);\n    } catch (error) {\n      console.error('Failed to decode audio data:', error);\n      this.emit('error', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Loads audio from a File object (for file uploads)\n   */\n  async loadFileObject(file: File): Promise<void> {\n    const arrayBuffer = await file.arrayBuffer();\n    await this.loadArrayBuffer(arrayBuffer);\n  }\n\n  /**\n   * Plays the loaded audio file\n   */\n  play(when: number = 0): void {\n    if (!this.buffer) {\n      console.error('No audio buffer loaded');\n      return;\n    }\n\n    // Stop any existing playback\n    this.stop();\n\n    // Create new buffer source\n    this.bufferSource = this.context.createBufferSource();\n    this.bufferSource.buffer = this.buffer;\n    this.bufferSource.connect(this.outputNode);\n    \n    // Handle playback ended\n    this.bufferSource.onended = () => {\n      this.isPlaying = false;\n      this.emit('ended');\n    };\n\n    // Start playback\n    const offset = this.pauseTime;\n    this.bufferSource.start(when, offset);\n    this.startTime = this.context.currentTime - offset;\n    this.isPlaying = true;\n    this.emit('play');\n  }\n\n  /**\n   * Stops playback\n   */\n  stop(): void {\n    if (this.bufferSource && this.isPlaying) {\n      try {\n        this.bufferSource.stop();\n        this.bufferSource.disconnect();\n      } catch (e) {\n        // Already stopped\n      }\n      this.bufferSource = undefined;\n    }\n    \n    this.pauseTime = 0;\n    this.isPlaying = false;\n    this.emit('stop');\n  }\n\n  /**\n   * Pauses playback (can be resumed)\n   */\n  pause(): void {\n    if (this.isPlaying && this.bufferSource) {\n      this.pauseTime = this.context.currentTime - this.startTime;\n      this.stop();\n      this.emit('pause');\n    }\n  }\n\n  /**\n   * Resumes playback from pause\n   */\n  resume(): void {\n    if (!this.isPlaying && this.pauseTime > 0) {\n      this.play();\n    }\n  }\n\n  /**\n   * Gets the duration of the loaded audio\n   */\n  getDuration(): number {\n    return this.buffer ? this.buffer.duration : 0;\n  }\n\n  /**\n   * Gets the current playback position\n   */\n  getCurrentTime(): number {\n    if (this.isPlaying) {\n      return this.context.currentTime - this.startTime;\n    }\n    return this.pauseTime;\n  }\n\n  /**\n   * Sets the playback position\n   */\n  seek(time: number): void {\n    const wasPlaying = this.isPlaying;\n    this.stop();\n    this.pauseTime = Math.max(0, Math.min(time, this.getDuration()));\n    if (wasPlaying) {\n      this.play();\n    }\n  }\n\n  /**\n   * Sets playback to loop\n   */\n  setLoop(loop: boolean): void {\n    if (this.bufferSource) {\n      this.bufferSource.loop = loop;\n    }\n  }\n\n  /**\n   * Disposes of the input\n   */\n  dispose(): void {\n    this.stop();\n    this.buffer = undefined;\n    super.dispose();\n  }\n}\n","/**\n * Stream input for live audio (microphone/line-in)\n */\n\nimport { Input } from './Input';\n\nexport class StreamInput extends Input {\n  private stream?: MediaStream;\n  private sourceNode?: MediaStreamAudioSourceNode;\n  private analyser?: AnalyserNode;\n  private constraints: MediaStreamConstraints;\n\n  constructor(context: AudioContext, autoStart: boolean = true) {\n    super(context);\n    \n    // Default constraints for audio input\n    this.constraints = {\n      audio: {\n        echoCancellation: false,\n        noiseSuppression: false,\n        autoGainControl: false\n      },\n      video: false\n    };\n\n    if (autoStart) {\n      this.startStream();\n    }\n  }\n\n  /**\n   * Starts the audio stream\n   */\n  async startStream(): Promise<void> {\n    try {\n      this.emit('requesting');\n      \n      // Request microphone access\n      this.stream = await navigator.mediaDevices.getUserMedia(this.constraints);\n      \n      // Create source node from stream\n      this.sourceNode = this.context.createMediaStreamSource(this.stream);\n      \n      // Create analyser for level monitoring\n      this.analyser = this.context.createAnalyser();\n      this.analyser.fftSize = 256;\n      \n      // Connect nodes\n      this.sourceNode.connect(this.analyser);\n      this.analyser.connect(this.outputNode);\n      \n      this.isPlaying = true;\n      this.emit('loaded');\n      this.emit('play');\n    } catch (error) {\n      console.error('Failed to get audio stream:', error);\n      this.emit('error', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Stops the audio stream\n   */\n  stop(): void {\n    if (this.sourceNode) {\n      try {\n        this.sourceNode.disconnect();\n      } catch (e) {\n        // Already disconnected\n      }\n      this.sourceNode = undefined;\n    }\n\n    if (this.analyser) {\n      try {\n        this.analyser.disconnect();\n      } catch (e) {\n        // Already disconnected\n      }\n      this.analyser = undefined;\n    }\n\n    if (this.stream) {\n      // Stop all tracks\n      this.stream.getTracks().forEach(track => track.stop());\n      this.stream = undefined;\n    }\n\n    this.isPlaying = false;\n    this.emit('stop');\n  }\n\n  /**\n   * Gets the current audio level (0-1)\n   */\n  getLevel(): number {\n    if (!this.analyser || !this.isPlaying) {\n      return 0;\n    }\n\n    const dataArray = new Uint8Array(this.analyser.frequencyBinCount);\n    this.analyser.getByteFrequencyData(dataArray);\n    \n    // Calculate average level\n    let sum = 0;\n    for (let i = 0; i < dataArray.length; i++) {\n      sum += dataArray[i];\n    }\n    \n    return sum / (dataArray.length * 255);\n  }\n\n  /**\n   * Gets frequency data for visualization\n   */\n  getFrequencyData(): Uint8Array {\n    if (!this.analyser) {\n      return new Uint8Array(0);\n    }\n\n    const dataArray = new Uint8Array(this.analyser.frequencyBinCount);\n    this.analyser.getByteFrequencyData(dataArray);\n    return dataArray;\n  }\n\n  /**\n   * Gets time domain data for waveform visualization\n   */\n  getWaveformData(): Uint8Array {\n    if (!this.analyser) {\n      return new Uint8Array(0);\n    }\n\n    const dataArray = new Uint8Array(this.analyser.frequencyBinCount);\n    this.analyser.getByteTimeDomainData(dataArray);\n    return dataArray;\n  }\n\n  /**\n   * Sets custom constraints for the media stream\n   */\n  setConstraints(constraints: MediaStreamConstraints): void {\n    this.constraints = constraints;\n  }\n\n  /**\n   * Restarts the stream with new constraints\n   */\n  async restart(): Promise<void> {\n    this.stop();\n    await this.startStream();\n  }\n\n  /**\n   * Checks if microphone permission is granted\n   */\n  static async checkPermission(): Promise<PermissionState> {\n    try {\n      const result = await navigator.permissions.query({ name: 'microphone' as PermissionName });\n      return result.state;\n    } catch (error) {\n      console.error('Failed to check microphone permission:', error);\n      return 'prompt';\n    }\n  }\n\n  /**\n   * Gets available audio input devices\n   */\n  static async getAudioDevices(): Promise<MediaDeviceInfo[]> {\n    try {\n      const devices = await navigator.mediaDevices.enumerateDevices();\n      return devices.filter(device => device.kind === 'audioinput');\n    } catch (error) {\n      console.error('Failed to enumerate devices:', error);\n      return [];\n    }\n  }\n\n  /**\n   * Switches to a different audio input device\n   */\n  async switchDevice(deviceId: string): Promise<void> {\n    this.constraints.audio = {\n      ...(typeof this.constraints.audio === 'object' ? this.constraints.audio : {}),\n      deviceId: { exact: deviceId }\n    };\n    await this.restart();\n  }\n\n  /**\n   * Disposes of the input\n   */\n  dispose(): void {\n    this.stop();\n    super.dispose();\n  }\n}\n","/**\n * Output class for audio destination (speakers)\n */\n\nimport { EventEmitter } from '../utils/EventEmitter';\nimport { IConnectable } from '../types';\n\nexport class Output extends EventEmitter implements IConnectable {\n  private context: AudioContext;\n  private inputNode: GainNode;\n  private masterVolume: GainNode;\n  private compressor: DynamicsCompressorNode;\n  private limiter: DynamicsCompressorNode;\n  private analyser: AnalyserNode;\n\n  constructor(context: AudioContext) {\n    super();\n    this.context = context;\n    \n    // Create nodes\n    this.inputNode = this.context.createGain();\n    this.masterVolume = this.context.createGain();\n    \n    // Create compressor for dynamics control\n    this.compressor = this.context.createDynamicsCompressor();\n    this.compressor.threshold.value = -24;\n    this.compressor.knee.value = 30;\n    this.compressor.ratio.value = 12;\n    this.compressor.attack.value = 0.003;\n    this.compressor.release.value = 0.25;\n    \n    // Create limiter to prevent clipping\n    this.limiter = this.context.createDynamicsCompressor();\n    this.limiter.threshold.value = -0.5;\n    this.limiter.knee.value = 0;\n    this.limiter.ratio.value = 20;\n    this.limiter.attack.value = 0.001;\n    this.limiter.release.value = 0.01;\n    \n    // Create analyser for visualization\n    this.analyser = this.context.createAnalyser();\n    this.analyser.fftSize = 2048;\n    \n    // Connect chain: input -> compressor -> limiter -> masterVolume -> analyser -> destination\n    this.inputNode.connect(this.compressor);\n    this.compressor.connect(this.limiter);\n    this.limiter.connect(this.masterVolume);\n    this.masterVolume.connect(this.analyser);\n    this.analyser.connect(this.context.destination);\n  }\n\n  /**\n   * Gets the input node for connections\n   */\n  getInput(): AudioNode {\n    return this.inputNode;\n  }\n\n  /**\n   * Gets the output node (returns destination for compatibility)\n   */\n  getOutput(): AudioNode {\n    return this.context.destination;\n  }\n\n  /**\n   * Connects to another destination (for IConnectable compatibility)\n   */\n  connect(destination: IConnectable): void {\n    this.analyser.connect(destination.getInput());\n  }\n\n  /**\n   * Sets previous in chain (for IConnectable compatibility)\n   */\n  setPrev(_prev: IConnectable): void {\n    // Output doesn't need to track previous\n  }\n\n  /**\n   * Disconnects (for IConnectable compatibility)\n   */\n  disconnect(): void {\n    try {\n      this.analyser.disconnect();\n    } catch (e) {\n      // Already disconnected\n    }\n  }\n\n  /**\n   * Sets the master volume (0-1)\n   */\n  setVolume(value: number): void {\n    value = Math.max(0, Math.min(1, value));\n    this.masterVolume.gain.value = value;\n    this.emit('volumeChange', value);\n  }\n\n  /**\n   * Gets the master volume\n   */\n  getVolume(): number {\n    return this.masterVolume.gain.value;\n  }\n\n  /**\n   * Mutes the output\n   */\n  mute(): void {\n    this.masterVolume.gain.value = 0;\n    this.emit('mute');\n  }\n\n  /**\n   * Unmutes the output\n   */\n  unmute(): void {\n    this.masterVolume.gain.value = 1;\n    this.emit('unmute');\n  }\n\n  /**\n   * Enables/disables the compressor\n   */\n  setCompressorEnabled(enabled: boolean): void {\n    if (enabled) {\n      // Reconnect with compressor\n      try {\n        this.inputNode.disconnect();\n        this.inputNode.connect(this.compressor);\n      } catch (e) {\n        // Already connected\n      }\n    } else {\n      // Bypass compressor\n      try {\n        this.inputNode.disconnect();\n        this.inputNode.connect(this.limiter);\n      } catch (e) {\n        // Already connected\n      }\n    }\n  }\n\n  /**\n   * Sets compressor parameters\n   */\n  setCompressorParams(params: {\n    threshold?: number;\n    knee?: number;\n    ratio?: number;\n    attack?: number;\n    release?: number;\n  }): void {\n    if (params.threshold !== undefined) {\n      this.compressor.threshold.value = params.threshold;\n    }\n    if (params.knee !== undefined) {\n      this.compressor.knee.value = params.knee;\n    }\n    if (params.ratio !== undefined) {\n      this.compressor.ratio.value = params.ratio;\n    }\n    if (params.attack !== undefined) {\n      this.compressor.attack.value = params.attack;\n    }\n    if (params.release !== undefined) {\n      this.compressor.release.value = params.release;\n    }\n  }\n\n  /**\n   * Gets the current output level (0-1)\n   */\n  getLevel(): number {\n    const dataArray = new Uint8Array(this.analyser.frequencyBinCount);\n    this.analyser.getByteTimeDomainData(dataArray);\n    \n    let max = 0;\n    for (let i = 0; i < dataArray.length; i++) {\n      const value = Math.abs(dataArray[i] - 128) / 128;\n      if (value > max) {\n        max = value;\n      }\n    }\n    \n    return max;\n  }\n\n  /**\n   * Gets frequency data for visualization\n   */\n  getFrequencyData(): Uint8Array {\n    const dataArray = new Uint8Array(this.analyser.frequencyBinCount);\n    this.analyser.getByteFrequencyData(dataArray);\n    return dataArray;\n  }\n\n  /**\n   * Gets waveform data for visualization\n   */\n  getWaveformData(): Uint8Array {\n    const dataArray = new Uint8Array(this.analyser.frequencyBinCount);\n    this.analyser.getByteTimeDomainData(dataArray);\n    return dataArray;\n  }\n\n  /**\n   * Connects an additional output destination\n   */\n  connectDestination(destination: AudioNode): void {\n    this.analyser.connect(destination);\n  }\n\n  /**\n   * Disconnects from a destination\n   */\n  disconnectDestination(destination: AudioNode): void {\n    try {\n      this.analyser.disconnect(destination);\n    } catch (e) {\n      // Not connected\n    }\n  }\n\n  /**\n   * Disposes of the output\n   */\n  dispose(): void {\n    try {\n      this.inputNode.disconnect();\n      this.compressor.disconnect();\n      this.limiter.disconnect();\n      this.masterVolume.disconnect();\n      this.analyser.disconnect();\n    } catch (e) {\n      // Already disconnected\n    }\n    this.removeAllListeners();\n  }\n}\n","/**\n * Stage class - manages the entire audio pipeline\n * Modern TypeScript implementation\n */\n\nimport { EventEmitter } from '../utils/EventEmitter';\nimport { Board } from './Board';\nimport { Input } from '../io/Input';\nimport { FileInput } from '../io/FileInput';\nimport { StreamInput } from '../io/StreamInput';\nimport { Output } from '../io/Output';\n\nexport class Stage extends EventEmitter {\n  private context: AudioContext;\n  private board?: Board;\n  private input: Input;\n  private output: Output;\n  private mediaStreamDestination?: MediaStreamAudioDestinationNode;\n\n  constructor() {\n    super();\n    \n    // Create audio context\n    this.context = new (window.AudioContext || (window as any).webkitAudioContext)();\n    \n    // Initialize IO\n    this.input = new Input(this.context);\n    this.output = new Output(this.context);\n    \n    // Handle context state changes\n    this.context.addEventListener('statechange', () => {\n      this.emit('statechange', this.context.state);\n    });\n  }\n\n  /**\n   * Gets the audio context\n   */\n  getContext(): AudioContext {\n    return this.context;\n  }\n\n  /**\n   * Resumes the audio context if suspended\n   */\n  async resume(): Promise<void> {\n    if (this.context.state === 'suspended') {\n      await this.context.resume();\n    }\n  }\n\n  /**\n   * Sets the board on the stage\n   */\n  setBoard(board: Board): void {\n    // Disconnect old board\n    if (this.board) {\n      this.input.disconnect();\n      this.board.disconnect();\n      this.board.dispose();\n    }\n    \n    // Set new board\n    this.board = board;\n    \n    // Set media stream destination if available\n    if (this.mediaStreamDestination) {\n      this.board.setMediaStreamDestination(this.mediaStreamDestination);\n    }\n    \n    // Route audio\n    this.route();\n    \n    this.emit('boardChange', board);\n  }\n\n  /**\n   * Gets the current board\n   */\n  getBoard(): Board | undefined {\n    return this.board;\n  }\n\n  /**\n   * Routes the audio signal through the chain\n   */\n  private route(): void {\n    if (!this.board) return;\n    \n    // Disconnect everything first\n    this.input.disconnect();\n    \n    // Connect input -> board -> output\n    this.input.connect(this.board);\n    this.board.connect(this.output);\n  }\n\n  /**\n   * Plays an audio file\n   */\n  async play(url: string): Promise<void> {\n    // Stop current input\n    this.input.stop();\n    this.input.disconnect();\n    \n    // Create new file input\n    const fileInput = new FileInput(this.context, url);\n    this.input = fileInput;\n    \n    // Wait for file to load\n    await new Promise<void>((resolve, reject) => {\n      fileInput.once('loaded', () => resolve());\n      fileInput.once('error', (error) => reject(error));\n    });\n    \n    // Route and play\n    this.route();\n    fileInput.play();\n  }\n\n  /**\n   * Plays an uploaded file\n   */\n  async playFile(file: File): Promise<void> {\n    // Stop current input\n    this.input.stop();\n    this.input.disconnect();\n    \n    // Create new file input\n    const fileInput = new FileInput(this.context);\n    await fileInput.loadFileObject(file);\n    this.input = fileInput;\n    \n    // Route and play\n    this.route();\n    fileInput.play();\n  }\n\n  /**\n   * Starts live input (microphone/line-in)\n   */\n  async startLiveInput(): Promise<void> {\n    // Stop current input\n    this.input.stop();\n    this.input.disconnect();\n    \n    // Create stream input\n    const streamInput = new StreamInput(this.context, false);\n    this.input = streamInput;\n    \n    // Start stream\n    await streamInput.startStream();\n    \n    // Route audio\n    this.route();\n  }\n\n  /**\n   * Stops the current input\n   */\n  stop(): void {\n    this.input.stop();\n  }\n\n  /**\n   * Sets the input\n   */\n  setInput(input: Input): void {\n    this.input.stop();\n    this.input.disconnect();\n    this.input = input;\n    this.route();\n  }\n\n  /**\n   * Gets the current input\n   */\n  getInput(): Input {\n    return this.input;\n  }\n\n  /**\n   * Gets the output\n   */\n  getOutput(): Output {\n    return this.output;\n  }\n\n  /**\n   * Sets the master volume\n   */\n  setVolume(value: number): void {\n    this.output.setVolume(value);\n  }\n\n  /**\n   * Gets the master volume\n   */\n  getVolume(): number {\n    return this.output.getVolume();\n  }\n\n  /**\n   * Sets media stream destination for WebRTC\n   */\n  setMediaStreamDestination(destination: MediaStreamAudioDestinationNode): void {\n    this.mediaStreamDestination = destination;\n    if (this.board) {\n      this.board.setMediaStreamDestination(destination);\n    }\n  }\n\n  /**\n   * Creates a media stream destination\n   */\n  createMediaStreamDestination(): MediaStreamAudioDestinationNode {\n    const destination = this.context.createMediaStreamDestination();\n    this.setMediaStreamDestination(destination);\n    return destination;\n  }\n\n  /**\n   * Gets audio analysis data\n   */\n  getAnalysisData(): {\n    inputLevel: number;\n    outputLevel: number;\n    frequencyData: Uint8Array;\n    waveformData: Uint8Array;\n  } {\n    return {\n      inputLevel: this.input instanceof StreamInput ? this.input.getLevel() : 0,\n      outputLevel: this.output.getLevel(),\n      frequencyData: this.output.getFrequencyData(),\n      waveformData: this.output.getWaveformData()\n    };\n  }\n\n  /**\n   * Disposes of the stage and all resources\n   */\n  dispose(): void {\n    this.input.dispose();\n    this.output.dispose();\n    if (this.board) {\n      this.board.dispose();\n    }\n    this.context.close();\n    this.removeAllListeners();\n  }\n}\n","/**\n * Base connectable component model. Hosts input and output buffer, chain and effects base.\n * Modern TypeScript implementation of the original ConnectableModel\n */\n\nimport { IConnectableModel } from '../types';\n\nexport class ConnectableModel implements IConnectableModel {\n  public context: AudioContext;\n  public inputBuffer: GainNode;\n  public outputBuffer: GainNode;\n  public chain: AudioNode[] = [];\n  public effects: AudioNode[] = [];\n  \n  protected prev?: AudioNode;\n  protected next?: AudioNode;\n  private disposed = false;\n\n  constructor(context: AudioContext) {\n    this.context = context;\n    this.inputBuffer = this.context.createGain();\n    this.outputBuffer = this.context.createGain();\n  }\n\n  /**\n   * Connects the output of the audio node of this model to another audio node.\n   */\n  connect(destination: AudioNode): void {\n    this.next = destination;\n    this.chain = [\n      this.inputBuffer,\n      ...this.effects,\n      this.outputBuffer,\n      this.next\n    ].filter(Boolean) as AudioNode[];\n    \n    this.routeInternal();\n  }\n\n  /**\n   * Gets the input buffer\n   */\n  getInput(): AudioNode {\n    return this.inputBuffer;\n  }\n\n  /**\n   * Gets the output buffer\n   */\n  getOutput(): AudioNode {\n    return this.outputBuffer;\n  }\n\n  /**\n   * Sets the previous node in the chain\n   */\n  setPrev(prev: AudioNode): void {\n    this.prev = prev;\n  }\n\n  /**\n   * Routes the internal effects chain\n   */\n  routeInternal(): void {\n    const chain = this.chain;\n    \n    // Disconnect all existing connections first\n    chain.forEach(node => {\n      try {\n        node.disconnect();\n      } catch (e) {\n        // Node might not be connected, that's okay\n      }\n    });\n    \n    // Connect the chain\n    for (let i = 0; i < chain.length - 1; i++) {\n      try {\n        chain[i].connect(chain[i + 1]);\n      } catch (e) {\n        console.error('Error connecting audio nodes:', e);\n      }\n    }\n  }\n\n  /**\n   * Disconnects the output buffer\n   */\n  disconnect(): void {\n    try {\n      this.outputBuffer.disconnect();\n    } catch (e) {\n      // Already disconnected, that's okay\n    }\n  }\n\n  /**\n   * Disposes of the model and cleans up resources\n   */\n  dispose(): void {\n    if (this.disposed) return;\n    \n    this.disconnect();\n    this.chain = [];\n    this.effects = [];\n    this.disposed = true;\n  }\n}\n","/**\n * Base Connectable component. It hosts other components as children, has a model and IO functionality.\n * Modern TypeScript implementation\n */\n\nimport { IConnectable, IConnectableModel } from '../types';\nimport { ConnectableModel } from './ConnectableModel';\nimport { EventEmitter } from '../utils/EventEmitter';\n\nexport abstract class Connectable extends EventEmitter implements IConnectable {\n  protected model: IConnectableModel;\n  protected context: AudioContext;\n  protected components: any[] = [];\n\n  constructor(context: AudioContext, ModelClass: typeof ConnectableModel = ConnectableModel) {\n    super();\n    this.context = context;\n    this.model = new ModelClass(context);\n    this.createChildComponents();\n    this.bindModelEvents();\n  }\n\n  /**\n   * Creates child components such as pots and switches.\n   * Override in subclasses\n   */\n  protected createChildComponents(): void {\n    this.components = [];\n  }\n\n  /**\n   * Binds model events. Override in subclasses if needed\n   */\n  protected bindModelEvents(): void {\n    // Override in subclasses\n  }\n\n  /**\n   * Gets the input buffer\n   */\n  getInput(): AudioNode {\n    return this.model.getInput();\n  }\n\n  /**\n   * Gets the output buffer\n   */\n  getOutput(): AudioNode {\n    return this.model.getOutput();\n  }\n\n  /**\n   * Sets the previous pedal in the chain\n   */\n  setPrev(prev: IConnectable): void {\n    this.model.setPrev(prev.getOutput());\n  }\n\n  /**\n   * Connects to another pedal\n   */\n  connect(destination: IConnectable): void {\n    destination.setPrev(this);\n    this.model.connect(destination.getInput());\n  }\n\n  /**\n   * Disconnects the output\n   */\n  disconnect(): void {\n    this.model.disconnect();\n  }\n\n  /**\n   * Disposes of the component\n   */\n  dispose(): void {\n    this.components.forEach(component => {\n      if (component.dispose) {\n        component.dispose();\n      }\n    });\n    this.model.dispose();\n    this.removeAllListeners();\n  }\n}\n","/**\n * Board class - hosts pedals and manages routing between them\n * Modern TypeScript implementation\n */\n\nimport { Connectable } from './Connectable';\nimport { ConnectableModel } from './ConnectableModel';\nimport { Box } from '../pedals/Box';\n\nexport class Board extends Connectable {\n  private pedals: Box[] = [];\n  private mediaStreamDestination?: MediaStreamAudioDestinationNode;\n\n  constructor(context: AudioContext) {\n    super(context, ConnectableModel);\n  }\n\n  /**\n   * Adds pedals to the board\n   */\n  addPedals(pedals: Box[]): void {\n    pedals.forEach(pedal => this.addPedal(pedal));\n  }\n\n  /**\n   * Adds a single pedal to the board\n   */\n  addPedal(pedal: Box): void {\n    this.pedals.push(pedal);\n    this.routeInternal();\n  }\n\n  /**\n   * Adds a pedal at a specific position\n   */\n  addPedalAt(pedal: Box, index: number): void {\n    this.pedals.splice(index, 0, pedal);\n    this.routeInternal();\n  }\n\n  /**\n   * Removes a pedal from the board\n   */\n  removePedal(pedal: Box): void {\n    const index = this.pedals.indexOf(pedal);\n    if (index !== -1) {\n      this.pedals.splice(index, 1);\n      pedal.disconnect();\n      this.routeInternal();\n    }\n  }\n\n  /**\n   * Removes a pedal at a specific index\n   */\n  removePedalAt(index: number): Box | undefined {\n    if (index >= 0 && index < this.pedals.length) {\n      const pedal = this.pedals.splice(index, 1)[0];\n      pedal.disconnect();\n      this.routeInternal();\n      return pedal;\n    }\n    return undefined;\n  }\n\n  /**\n   * Gets all pedals on the board\n   */\n  getPedals(): Box[] {\n    return [...this.pedals];\n  }\n\n  /**\n   * Gets a pedal at a specific index\n   */\n  getPedalAt(index: number): Box | undefined {\n    return this.pedals[index];\n  }\n\n  /**\n   * Moves a pedal to a new position\n   */\n  movePedal(fromIndex: number, toIndex: number): void {\n    if (fromIndex >= 0 && fromIndex < this.pedals.length &&\n        toIndex >= 0 && toIndex < this.pedals.length) {\n      const pedal = this.pedals.splice(fromIndex, 1)[0];\n      this.pedals.splice(toIndex, 0, pedal);\n      this.routeInternal();\n    }\n  }\n\n  /**\n   * Routes the internal signal chain through all pedals\n   */\n  private routeInternal(): void {\n    // Disconnect all existing connections\n    this.pedals.forEach(pedal => pedal.disconnect());\n    \n    try {\n      this.model.inputBuffer.disconnect();\n      this.model.outputBuffer.disconnect();\n    } catch (e) {\n      // Might not be connected\n    }\n\n    if (this.pedals.length === 0) {\n      // No pedals, connect input directly to output\n      this.model.inputBuffer.connect(this.model.outputBuffer);\n    } else {\n      // Connect input to first pedal\n      this.model.inputBuffer.connect(this.pedals[0].getInput());\n      \n      // Connect pedals in series\n      for (let i = 0; i < this.pedals.length - 1; i++) {\n        this.pedals[i].connect(this.pedals[i + 1]);\n      }\n      \n      // Connect last pedal to output\n      const lastPedal = this.pedals[this.pedals.length - 1];\n      lastPedal.getOutput().connect(this.model.outputBuffer);\n    }\n\n    // Connect to media stream if set\n    if (this.mediaStreamDestination) {\n      this.model.outputBuffer.connect(this.mediaStreamDestination);\n    }\n  }\n\n  /**\n   * Sets media stream destination for WebRTC\n   */\n  setMediaStreamDestination(destination: MediaStreamAudioDestinationNode): void {\n    this.mediaStreamDestination = destination;\n    this.routeInternal();\n  }\n\n  /**\n   * Clears all pedals from the board\n   */\n  clear(): void {\n    this.pedals.forEach(pedal => pedal.disconnect());\n    this.pedals = [];\n    this.routeInternal();\n  }\n\n  /**\n   * Disposes of the board and all its pedals\n   */\n  dispose(): void {\n    this.pedals.forEach(pedal => pedal.dispose());\n    this.pedals = [];\n    super.dispose();\n  }\n\n  /**\n   * Serializes the board configuration\n   */\n  toJSON(): any {\n    return {\n      pedals: this.pedals.map(pedal => ({\n        name: pedal.name,\n        bypassed: pedal.isBypassed(),\n        pots: pedal.pots.map(pot => ({\n          name: pot.getName(),\n          value: pot.getValue()\n        }))\n      }))\n    };\n  }\n}\n","/**\n * Base pedal component model\n * Modern TypeScript implementation\n */\n\nimport { ConnectableModel } from '../core/ConnectableModel';\n\nexport class BoxModel extends ConnectableModel {\n  public level: GainNode;\n  public nodes: [AudioNode, AudioNode, AudioNode | null][] = [];\n  \n  constructor(context: AudioContext) {\n    super(context);\n    \n    // Create the level (volume) control\n    this.level = this.context.createGain();\n    this.level.gain.value = 1;\n    \n    // Add level to effects chain\n    this.effects.push(this.level);\n  }\n\n  /**\n   * Sets the level of the effect\n   */\n  setLevel(newLevel: number): void {\n    // Clamp between 0 and 10, then normalize to 0-1\n    newLevel = Math.min(Math.max(newLevel, 0), 10);\n    this.level.gain.value = newLevel / 10;\n  }\n\n  /**\n   * Routes the internal effects chain and sets up bypass nodes\n   */\n  routeInternal(): void {\n    super.routeInternal();\n    \n    // Set up nodes for bypass switching\n    // When bypassed: input -> output (skip effects)\n    // When active: input -> effects[0] -> ... -> output\n    if (this.effects.length > 0) {\n      this.nodes = [\n        [this.effects[0], this.inputBuffer, this.outputBuffer],\n        [this.outputBuffer, this.effects[this.effects.length - 1], null]\n      ] as [AudioNode, AudioNode, AudioNode | null][];\n    }\n  }\n\n  /**\n   * Enables the effect (removes bypass)\n   */\n  enable(): void {\n    this.routeInternal();\n  }\n\n  /**\n   * Bypasses the effect\n   */\n  bypass(): void {\n    try {\n      // Disconnect effects and connect input directly to output\n      this.inputBuffer.disconnect();\n      this.effects.forEach(effect => {\n        try {\n          effect.disconnect();\n        } catch (e) {\n          // Already disconnected\n        }\n      });\n      this.inputBuffer.connect(this.outputBuffer);\n      if (this.next) {\n        this.outputBuffer.connect(this.next);\n      }\n    } catch (e) {\n      console.error('Error bypassing effect:', e);\n    }\n  }\n}\n","/**\n * Base Pot (potentiometer) class\n * Modern TypeScript implementation\n */\n\nimport { EventEmitter } from '../../utils/EventEmitter';\nimport { IPotValue } from '../../types';\n\nexport abstract class Pot extends EventEmitter {\n  protected value: number = 0;\n  protected min: number;\n  protected max: number;\n  protected step: number;\n  protected name: string;\n  protected handler?: (value: number) => void;\n  protected audioParam?: AudioParam;\n\n  constructor(\n    handlerOrParam: ((value: number) => void) | AudioParam,\n    name: string,\n    multiplier: number = 1,\n    min: number = 0,\n    max?: number\n  ) {\n    super();\n    this.name = name;\n    this.min = min;\n    this.max = max ?? min + multiplier;\n    this.step = (this.max - this.min) / 100; // 100 steps by default\n    \n    // Check if handler is an AudioParam or a function\n    if (handlerOrParam instanceof AudioParam) {\n      this.audioParam = handlerOrParam;\n      this.handler = (value: number) => {\n        this.audioParam!.value = value;\n      };\n    } else {\n      this.handler = handlerOrParam;\n    }\n  }\n\n  /**\n   * Sets the value of the pot (0-1 range, will be mapped to min-max)\n   */\n  setValue(normalizedValue: number): void {\n    // Clamp between 0 and 1\n    normalizedValue = Math.max(0, Math.min(1, normalizedValue));\n    \n    // Map to actual range\n    const oldValue = this.value;\n    this.value = this.mapValue(normalizedValue);\n    \n    // Call handler if provided\n    if (this.handler) {\n      this.handler(this.value);\n    }\n    \n    // Emit change event\n    this.emit('change', {\n      value: this.value,\n      normalizedValue,\n      oldValue\n    });\n  }\n\n  /**\n   * Sets the actual value (not normalized)\n   */\n  setActualValue(value: number): void {\n    // Clamp to range\n    value = Math.max(this.min, Math.min(this.max, value));\n    \n    // Calculate normalized value\n    const normalizedValue = (value - this.min) / (this.max - this.min);\n    this.setValue(normalizedValue);\n  }\n\n  /**\n   * Maps normalized value (0-1) to actual range\n   * Override in subclasses for different curves\n   */\n  protected abstract mapValue(normalizedValue: number): number;\n\n  /**\n   * Gets the current value\n   */\n  getValue(): number {\n    return this.value;\n  }\n\n  /**\n   * Gets the normalized value (0-1)\n   */\n  getNormalizedValue(): number {\n    return (this.value - this.min) / (this.max - this.min);\n  }\n\n  /**\n   * Gets the pot configuration\n   */\n  getConfig(): IPotValue {\n    return {\n      value: this.value,\n      min: this.min,\n      max: this.max,\n      step: this.step\n    };\n  }\n\n  /**\n   * Gets the pot name\n   */\n  getName(): string {\n    return this.name;\n  }\n}\n","/**\n * Linear potentiometer - maps input linearly to output\n */\n\nimport { Pot } from './Pot';\n\nexport class LinearPot extends Pot {\n  /**\n   * Maps normalized value (0-1) to actual range using linear mapping\n   */\n  protected mapValue(normalizedValue: number): number {\n    return this.min + (normalizedValue * (this.max - this.min));\n  }\n}\n","/**\n * Base switch class for pedal switches\n */\n\nimport { EventEmitter } from '../../utils/EventEmitter';\nimport { ISwitchState } from '../../types';\n\nexport abstract class Switch extends EventEmitter {\n  protected state: boolean = false;\n  protected name: string;\n  protected nodes?: [AudioNode, AudioNode, AudioNode | null][];\n\n  constructor(name: string, defaultState: boolean = false) {\n    super();\n    this.name = name;\n    this.state = defaultState;\n  }\n\n  /**\n   * Sets the switch state\n   */\n  setState(state: boolean): void {\n    if (this.state !== state) {\n      this.state = state;\n      this.emit('change', state);\n      this.emit(state ? 'on' : 'off');\n      this.routeNodes();\n    }\n  }\n\n  /**\n   * Gets the current state\n   */\n  getState(): boolean {\n    return this.state;\n  }\n\n  /**\n   * Toggles the switch state\n   */\n  abstract toggle(): void;\n\n  /**\n   * Sets the audio nodes for bypass routing\n   * Format: [[activeNode, inputNode, bypassNode], ...]\n   */\n  setNodes(nodes: [AudioNode, AudioNode, AudioNode | null][]): void {\n    this.nodes = nodes;\n    this.routeNodes();\n  }\n\n  /**\n   * Routes audio nodes based on switch state\n   */\n  protected routeNodes(): void {\n    if (!this.nodes) return;\n    \n    this.nodes.forEach(nodeSet => {\n      const [activeNode, inputNode, bypassNode] = nodeSet;\n      \n      try {\n        // Disconnect input from both paths\n        inputNode.disconnect();\n        \n        if (this.state) {\n          // Active: route through effect\n          inputNode.connect(activeNode);\n        } else if (bypassNode) {\n          // Bypassed: route directly to bypass node\n          inputNode.connect(bypassNode);\n        }\n      } catch (e) {\n        // Nodes might not be connected yet\n      }\n    });\n  }\n\n  /**\n   * Gets the switch configuration\n   */\n  getConfig(): ISwitchState {\n    return {\n      on: this.state,\n      momentary: this.isMomentary()\n    };\n  }\n\n  /**\n   * Returns whether this is a momentary switch\n   */\n  abstract isMomentary(): boolean;\n\n  /**\n   * Gets the switch name\n   */\n  getName(): string {\n    return this.name;\n  }\n}\n","/**\n * Toggle switch - stays in position until toggled again\n */\n\nimport { Switch } from './Switch';\n\nexport class ToggleSwitch extends Switch {\n  /**\n   * Toggles the switch state\n   */\n  toggle(): void {\n    this.setState(!this.state);\n  }\n\n  /**\n   * Returns false as this is not a momentary switch\n   */\n  isMomentary(): boolean {\n    return false;\n  }\n}\n","/**\n * LED indicator that follows a switch state\n */\n\nimport { EventEmitter } from '../utils/EventEmitter';\nimport { Switch } from './switches/Switch';\n\nexport class Led extends EventEmitter {\n  private switch: Switch;\n  private state: boolean = false;\n\n  constructor(switchControl: Switch) {\n    super();\n    this.switch = switchControl;\n    \n    // Follow switch state\n    this.switch.on('change', (state: boolean) => {\n      this.setState(state);\n    });\n    \n    // Set initial state\n    this.setState(this.switch.getState());\n  }\n\n  /**\n   * Sets the LED state\n   */\n  setState(state: boolean): void {\n    if (this.state !== state) {\n      this.state = state;\n      this.emit('change', state);\n    }\n  }\n\n  /**\n   * Gets the LED state\n   */\n  getState(): boolean {\n    return this.state;\n  }\n\n  /**\n   * Checks if LED is on\n   */\n  isOn(): boolean {\n    return this.state;\n  }\n\n  /**\n   * Checks if LED is off\n   */\n  isOff(): boolean {\n    return !this.state;\n  }\n}\n","/**\n * Base pedal class\n * Modern TypeScript implementation\n */\n\nimport { Connectable } from '../core/Connectable';\nimport { BoxModel } from './BoxModel';\nimport { LinearPot } from '../controls/pots/LinearPot';\nimport { Pot } from '../controls/pots/Pot';\nimport { ToggleSwitch } from '../controls/switches/ToggleSwitch';\nimport { Led } from '../controls/Led';\nimport { IConnectable } from '../types';\n\nexport abstract class Box extends Connectable {\n  declare protected model: BoxModel;\n  public volumePot!: LinearPot;\n  public bypassSwitch!: ToggleSwitch;\n  public led!: Led;\n  public pots: Pot[] = [];\n  public switches: ToggleSwitch[] = [];\n  public leds: Led[] = [];\n  \n  // Abstract property that subclasses must implement\n  abstract readonly name: string;\n\n  constructor(context: AudioContext, ModelClass: typeof BoxModel = BoxModel) {\n    super(context, ModelClass as any);\n    this.model = new ModelClass(context) as BoxModel;\n  }\n\n  /**\n   * Creates the potentiometers for this pedal\n   */\n  protected createPots(): void {\n    // Create volume pot that controls the level gain\n    this.volumePot = new LinearPot(\n      (value: number) => this.model.setLevel(value),\n      'volume',\n      1,\n      0,\n      10\n    );\n    this.volumePot.setValue(10); // Default to full volume\n    \n    this.pots = [this.volumePot];\n  }\n\n  /**\n   * Creates the switches for this pedal\n   */\n  protected createSwitches(): void {\n    // Create bypass switch\n    this.bypassSwitch = new ToggleSwitch('bypass');\n    \n    // Create LED that follows bypass switch\n    this.led = new Led(this.bypassSwitch);\n    \n    this.leds = [this.led];\n    this.switches = [this.bypassSwitch];\n    \n    // Handle bypass switching\n    this.bypassSwitch.on('change', (state: boolean) => {\n      if (state) {\n        this.model.enable();\n      } else {\n        this.model.bypass();\n      }\n      // Small delay to avoid clicks\n      setTimeout(() => {\n        if (state) {\n          this.model.enable();\n        } else {\n          this.model.bypass();\n        }\n      }, 10);\n    });\n  }\n\n  /**\n   * Override createChildComponents to create pots and switches\n   */\n  protected createChildComponents(): void {\n    this.createPots();\n    this.createSwitches();\n  }\n\n  /**\n   * Connects to another pedal and sets up bypass nodes\n   */\n  connect(destination: IConnectable): void {\n    super.connect(destination);\n    \n    // Set up bypass switch nodes if needed\n    if (this.bypassSwitch && this.model.nodes) {\n      // The bypass switch will handle routing between effect and bypass\n      this.bypassSwitch.setNodes(this.model.nodes);\n    }\n  }\n\n  /**\n   * Sets the volume level\n   */\n  setLevel(value: number): void {\n    this.volumePot.setValue(value);\n  }\n\n  /**\n   * Gets the current volume level\n   */\n  getLevel(): number {\n    return this.volumePot.getValue();\n  }\n\n  /**\n   * Toggles the bypass state\n   */\n  toggleBypass(): void {\n    this.bypassSwitch.toggle();\n  }\n\n  /**\n   * Sets the bypass state\n   */\n  setBypass(bypassed: boolean): void {\n    this.bypassSwitch.setState(!bypassed);\n  }\n\n  /**\n   * Gets the bypass state\n   */\n  isBypassed(): boolean {\n    return !this.bypassSwitch.getState();\n  }\n}\n","/**\n * Overdrive pedal model - creates distortion effect\n */\n\nimport { BoxModel } from '../BoxModel';\n\nexport class OverdriveModel extends BoxModel {\n  private waveShaper: WaveShaperNode;\n  private lowPass: BiquadFilterNode;\n  private lowPassFreq: number = 3000;\n  private driveAmount: number = 0;\n\n  constructor(context: AudioContext) {\n    super(context);\n    \n    // Create low-pass filter for tone control\n    this.lowPass = this.context.createBiquadFilter();\n    this.lowPass.type = 'lowpass';\n    this.lowPass.frequency.value = this.lowPassFreq;\n    \n    // Create wave shaper for distortion\n    this.waveShaper = this.context.createWaveShaper();\n    this.waveShaper.oversample = '4x'; // Better quality\n    \n    // Set up effects chain: input -> waveshaper -> lowpass -> level -> output\n    this.effects = [\n      this.waveShaper,\n      this.lowPass,\n      this.level\n    ];\n    \n    // Initialize with mild overdrive\n    this.createWSCurve(0);\n  }\n\n  /**\n   * Creates wave shaper curve for distortion\n   */\n  private createWSCurve(amount: number): void {\n    const k = amount;\n    const nSamples = 22050;\n    const curve = new Float32Array(nSamples);\n    const deg = Math.PI / 180;\n    \n    for (let i = 0; i < nSamples; i++) {\n      const x = (i * 2) / nSamples - 1;\n      curve[i] = ((3 + k) * x * 20 * deg) / (Math.PI + k * Math.abs(x));\n    }\n    \n    this.waveShaper.curve = curve;\n  }\n\n  /**\n   * Sets the drive (distortion) level\n   * @param value 0-10 range\n   */\n  setDrive(value: number): void {\n    // Clamp and store\n    this.driveAmount = Math.max(0, Math.min(10, value));\n    \n    // Create new curve with this amount\n    this.createWSCurve(this.driveAmount * 10);\n  }\n\n  /**\n   * Sets the tone (brightness) level\n   * @param value 0-10 range\n   */\n  setTone(value: number): void {\n    // Map 0-10 to 200Hz-5000Hz frequency range\n    value = Math.max(0, Math.min(10, value));\n    this.lowPass.frequency.value = 200 + (value * 480);\n  }\n\n  /**\n   * Gets the current drive amount\n   */\n  getDrive(): number {\n    return this.driveAmount;\n  }\n\n  /**\n   * Gets the current tone frequency\n   */\n  getTone(): number {\n    return this.lowPass.frequency.value;\n  }\n}\n","/**\n * Logarithmic potentiometer - maps input logarithmically to output\n * Better for audio applications where human perception is logarithmic\n */\n\nimport { Pot } from './Pot';\n\nexport class LogPot extends Pot {\n  /**\n   * Maps normalized value (0-1) to actual range using logarithmic mapping\n   */\n  protected mapValue(normalizedValue: number): number {\n    // Avoid log(0) by adding small offset\n    const minLog = Math.log10(0.001);\n    const maxLog = Math.log10(1);\n    \n    // Map to logarithmic scale\n    const logValue = minLog + (normalizedValue * (maxLog - minLog));\n    const scaledValue = Math.pow(10, logValue);\n    \n    // Map to actual range\n    return this.min + (scaledValue * (this.max - this.min));\n  }\n}\n","/**\n * Overdrive pedal - adds distortion/overdrive effect\n */\n\nimport { Box } from '../Box';\nimport { OverdriveModel } from './OverdriveModel';\nimport { LogPot } from '../../controls/pots/LogPot';\n\nexport class Overdrive extends Box {\n  declare protected model: OverdriveModel;\n  public readonly name = 'overdrive';\n  \n  private drivePot!: LogPot;\n  private tonePot!: LogPot;\n\n  constructor(context: AudioContext) {\n    super(context, OverdriveModel);\n  }\n\n  /**\n   * Creates the pots for this pedal\n   */\n  protected createPots(): void {\n    super.createPots();\n    \n    // Drive pot (distortion amount)\n    this.drivePot = new LogPot(\n      (value: number) => this.model.setDrive(value),\n      'drive',\n      10,\n      0,\n      10\n    );\n    \n    // Tone pot (brightness)\n    this.tonePot = new LogPot(\n      (value: number) => this.model.setTone(value),\n      'tone',\n      10,\n      0,\n      10\n    );\n    \n    // Add to pots array\n    this.pots.push(this.drivePot, this.tonePot);\n    \n    // Set default values\n    this.drivePot.setActualValue(2);\n    this.tonePot.setActualValue(5);\n  }\n\n  /**\n   * Sets the drive amount\n   */\n  setDrive(value: number): void {\n    this.drivePot.setActualValue(value);\n  }\n\n  /**\n   * Gets the drive amount\n   */\n  getDrive(): number {\n    return this.drivePot.getValue();\n  }\n\n  /**\n   * Sets the tone\n   */\n  setTone(value: number): void {\n    this.tonePot.setActualValue(value);\n  }\n\n  /**\n   * Gets the tone\n   */\n  getTone(): number {\n    return this.tonePot.getValue();\n  }\n}\n","/**\n * Delay pedal model - creates echo/delay effect\n */\n\nimport { BoxModel } from '../BoxModel';\n\nexport class DelayModel extends BoxModel {\n  private delay: DelayNode;\n  private feedback: GainNode;\n  private wetGain: GainNode;\n  private dryGain: GainNode;\n  private maxDelayTime: number = 2; // 2 seconds max delay\n\n  constructor(context: AudioContext) {\n    super(context);\n    \n    // Create delay node\n    this.delay = this.context.createDelay(this.maxDelayTime);\n    this.delay.delayTime.value = 0.3; // Default 300ms delay\n    \n    // Create feedback loop\n    this.feedback = this.context.createGain();\n    this.feedback.gain.value = 0.4; // Default 40% feedback\n    \n    // Create wet/dry mix\n    this.wetGain = this.context.createGain();\n    this.wetGain.gain.value = 0.5;\n    \n    this.dryGain = this.context.createGain();\n    this.dryGain.gain.value = 1;\n    \n    // Connect feedback loop: delay -> feedback -> delay\n    this.delay.connect(this.feedback);\n    this.feedback.connect(this.delay);\n    \n    // Connect wet path: input -> delay -> wetGain -> level\n    this.delay.connect(this.wetGain);\n    \n    // Both wet and dry connect to level\n    this.wetGain.connect(this.level);\n    this.dryGain.connect(this.level);\n    \n    // Effects array for routing\n    this.effects = [this.dryGain, this.delay, this.level];\n  }\n\n  /**\n   * Routes internal connections\n   */\n  routeInternal(): void {\n    \n    // Disconnect everything first\n    try {\n      this.inputBuffer.disconnect();\n      this.dryGain.disconnect();\n      this.delay.disconnect();\n      this.wetGain.disconnect();\n      this.level.disconnect();\n      this.outputBuffer.disconnect();\n    } catch (e) {\n      // Some might not be connected\n    }\n    \n    // Connect dry path\n    this.inputBuffer.connect(this.dryGain);\n    this.dryGain.connect(this.level);\n    \n    // Connect wet path\n    this.inputBuffer.connect(this.delay);\n    this.delay.connect(this.wetGain);\n    this.delay.connect(this.feedback);\n    this.feedback.connect(this.delay);\n    this.wetGain.connect(this.level);\n    \n    // Connect output\n    this.level.connect(this.outputBuffer);\n    \n    if (this.next) {\n      this.outputBuffer.connect(this.next);\n    }\n    \n    // Set up bypass nodes\n    this.nodes = [\n      [this.dryGain, this.inputBuffer, this.outputBuffer],\n      [this.outputBuffer, this.level, null]\n    ] as [AudioNode, AudioNode, AudioNode | null][];\n  }\n\n  /**\n   * Sets the delay time in seconds\n   * @param time Delay time in seconds (0 to maxDelayTime)\n   */\n  setDelayTime(time: number): void {\n    time = Math.max(0, Math.min(this.maxDelayTime, time));\n    this.delay.delayTime.value = time;\n  }\n\n  /**\n   * Sets the feedback amount (how much of the delayed signal feeds back)\n   * @param amount 0-1 range (be careful with values close to 1)\n   */\n  setFeedback(amount: number): void {\n    amount = Math.max(0, Math.min(0.95, amount)); // Cap at 0.95 to prevent runaway feedback\n    this.feedback.gain.value = amount;\n  }\n\n  /**\n   * Sets the wet/dry mix\n   * @param mix 0-1 range (0 = fully dry, 1 = fully wet)\n   */\n  setMix(mix: number): void {\n    mix = Math.max(0, Math.min(1, mix));\n    this.wetGain.gain.value = mix;\n    this.dryGain.gain.value = 1 - (mix * 0.5); // Keep some dry signal\n  }\n\n  /**\n   * Gets the current delay time\n   */\n  getDelayTime(): number {\n    return this.delay.delayTime.value;\n  }\n\n  /**\n   * Gets the current feedback amount\n   */\n  getFeedback(): number {\n    return this.feedback.gain.value;\n  }\n\n  /**\n   * Gets the current mix\n   */\n  getMix(): number {\n    return this.wetGain.gain.value;\n  }\n}\n","/**\n * Delay pedal - adds echo/delay effect\n */\n\nimport { Box } from '../Box';\nimport { DelayModel } from './DelayModel';\nimport { LinearPot } from '../../controls/pots/LinearPot';\n\nexport class Delay extends Box {\n  declare protected model: DelayModel;\n  public readonly name = 'delay';\n  \n  private timePot!: LinearPot;\n  private feedbackPot!: LinearPot;\n  private mixPot!: LinearPot;\n\n  constructor(context: AudioContext) {\n    super(context, DelayModel);\n  }\n\n  /**\n   * Creates the pots for this pedal\n   */\n  protected createPots(): void {\n    super.createPots();\n    \n    // Delay time pot (0-2 seconds)\n    this.timePot = new LinearPot(\n      (value: number) => this.model.setDelayTime(value),\n      'time',\n      2,\n      0,\n      2\n    );\n    \n    // Feedback pot (0-95% feedback)\n    this.feedbackPot = new LinearPot(\n      (value: number) => this.model.setFeedback(value),\n      'feedback',\n      0.95,\n      0,\n      0.95\n    );\n    \n    // Mix pot (dry/wet balance)\n    this.mixPot = new LinearPot(\n      (value: number) => this.model.setMix(value),\n      'mix',\n      1,\n      0,\n      1\n    );\n    \n    // Add to pots array\n    this.pots.push(this.timePot, this.feedbackPot, this.mixPot);\n    \n    // Set default values\n    this.timePot.setActualValue(0.3); // 300ms\n    this.feedbackPot.setActualValue(0.4); // 40% feedback\n    this.mixPot.setActualValue(0.5); // 50% mix\n  }\n\n  /**\n   * Sets the delay time (0-10 maps to 0-2 seconds)\n   */\n  setDelayTimer(value: number): void {\n    // Map 0-10 to 0-2 seconds\n    value = (value / 10) * 2;\n    this.timePot.setActualValue(value);\n  }\n\n  /**\n   * Sets the feedback gain (0-10 maps to 0-95%)\n   */\n  setFeedbackGain(value: number): void {\n    // Map 0-10 to 0-0.95\n    value = (value / 10) * 0.95;\n    this.feedbackPot.setActualValue(value);\n  }\n\n  /**\n   * Sets the mix (0-10 maps to 0-100%)\n   */\n  setMix(value: number): void {\n    // Map 0-10 to 0-1\n    value = value / 10;\n    this.mixPot.setActualValue(value);\n  }\n\n  /**\n   * Gets the delay time in seconds\n   */\n  getDelayTime(): number {\n    return this.timePot.getValue();\n  }\n\n  /**\n   * Gets the feedback amount\n   */\n  getFeedback(): number {\n    return this.feedbackPot.getValue();\n  }\n\n  /**\n   * Gets the mix amount\n   */\n  getMix(): number {\n    return this.mixPot.getValue();\n  }\n}\n","/**\n * Reverb pedal model - creates reverb/room effect using convolution\n */\n\nimport { BoxModel } from '../BoxModel';\n\nexport class ReverbModel extends BoxModel {\n  private convolver: ConvolverNode;\n  private wetGain: GainNode;\n  private dryGain: GainNode;\n  private impulseBuffer?: AudioBuffer;\n\n  constructor(context: AudioContext) {\n    super(context);\n    \n    // Create convolver for reverb\n    this.convolver = this.context.createConvolver();\n    \n    // Create wet/dry mix\n    this.wetGain = this.context.createGain();\n    this.wetGain.gain.value = 0.3; // Default 30% wet\n    \n    this.dryGain = this.context.createGain();\n    this.dryGain.gain.value = 0.7; // Default 70% dry\n    \n    // Generate default impulse response\n    this.generateImpulse(2, 2, 0.5);\n    \n    // Connect wet path through convolver\n    this.convolver.connect(this.wetGain);\n    \n    // Both paths connect to level\n    this.wetGain.connect(this.level);\n    this.dryGain.connect(this.level);\n    \n    // Effects array for routing\n    this.effects = [this.dryGain, this.convolver, this.level];\n  }\n\n  /**\n   * Generates an impulse response for the reverb\n   * @param duration Duration of the reverb tail in seconds\n   * @param decay Decay factor (how quickly it fades)\n   * @param brightness High frequency content (0-1)\n   */\n  private generateImpulse(duration: number, decay: number, brightness: number): void {\n    const length = this.context.sampleRate * duration;\n    const impulse = this.context.createBuffer(2, length, this.context.sampleRate);\n    \n    for (let channel = 0; channel < 2; channel++) {\n      const channelData = impulse.getChannelData(channel);\n      \n      for (let i = 0; i < length; i++) {\n        // Generate white noise with exponential decay\n        let sample = (Math.random() * 2 - 1) * Math.pow(1 - i / length, decay);\n        \n        // Apply brightness filter (simple lowpass)\n        if (brightness < 1 && i > 0) {\n          sample = sample * brightness + channelData[i - 1] * (1 - brightness);\n        }\n        \n        channelData[i] = sample;\n      }\n    }\n    \n    this.impulseBuffer = impulse;\n    this.convolver.buffer = impulse;\n  }\n\n  /**\n   * Routes internal connections\n   */\n  routeInternal(): void {\n    // Disconnect everything first\n    try {\n      this.inputBuffer.disconnect();\n      this.dryGain.disconnect();\n      this.convolver.disconnect();\n      this.wetGain.disconnect();\n      this.level.disconnect();\n      this.outputBuffer.disconnect();\n    } catch (e) {\n      // Some might not be connected\n    }\n    \n    // Connect dry path\n    this.inputBuffer.connect(this.dryGain);\n    this.dryGain.connect(this.level);\n    \n    // Connect wet path\n    this.inputBuffer.connect(this.convolver);\n    this.convolver.connect(this.wetGain);\n    this.wetGain.connect(this.level);\n    \n    // Connect output\n    this.level.connect(this.outputBuffer);\n    \n    if (this.next) {\n      this.outputBuffer.connect(this.next);\n    }\n    \n    // Set up bypass nodes\n    this.nodes = [\n      [this.dryGain, this.inputBuffer, this.outputBuffer],\n      [this.outputBuffer, this.level, null]\n    ] as [AudioNode, AudioNode, AudioNode | null][];\n  }\n\n  /**\n   * Sets the room size (generates new impulse)\n   * @param size 0-10 range (maps to 0.5-4 seconds)\n   */\n  setRoomSize(size: number): void {\n    size = Math.max(0, Math.min(10, size));\n    const duration = 0.5 + (size / 10) * 3.5;\n    const decay = 2 + (size / 10) * 2;\n    this.generateImpulse(duration, decay, 0.5);\n  }\n\n  /**\n   * Sets the wet/dry mix\n   * @param mix 0-1 range (0 = fully dry, 1 = fully wet)\n   */\n  setMix(mix: number): void {\n    mix = Math.max(0, Math.min(1, mix));\n    this.wetGain.gain.value = mix;\n    this.dryGain.gain.value = 1 - mix * 0.7; // Keep some dry signal\n  }\n\n  /**\n   * Sets the brightness of the reverb\n   * @param brightness 0-10 range\n   */\n  setBrightness(brightness: number): void {\n    brightness = Math.max(0, Math.min(10, brightness));\n    const duration = this.impulseBuffer ? this.impulseBuffer.duration : 2;\n    const decay = 2;\n    this.generateImpulse(duration, decay, brightness / 10);\n  }\n\n  /**\n   * Loads a custom impulse response from URL\n   */\n  async loadImpulse(url: string): Promise<void> {\n    try {\n      const response = await fetch(url);\n      const arrayBuffer = await response.arrayBuffer();\n      const audioBuffer = await this.context.decodeAudioData(arrayBuffer);\n      this.impulseBuffer = audioBuffer;\n      this.convolver.buffer = audioBuffer;\n    } catch (error) {\n      console.error('Failed to load impulse response:', error);\n      // Fall back to generated impulse\n      this.generateImpulse(2, 2, 0.5);\n    }\n  }\n}\n","/**\n * Reverb pedal - adds reverb/room effect\n */\n\nimport { Box } from '../Box';\nimport { ReverbModel } from './ReverbModel';\nimport { LinearPot } from '../../controls/pots/LinearPot';\n\nexport class Reverb extends Box {\n  declare protected model: ReverbModel;\n  public readonly name = 'reverb';\n  \n  private roomSizePot!: LinearPot;\n  private mixPot!: LinearPot;\n  private brightnessPot!: LinearPot;\n\n  constructor(context: AudioContext) {\n    super(context, ReverbModel);\n  }\n\n  /**\n   * Creates the pots for this pedal\n   */\n  protected createPots(): void {\n    super.createPots();\n    \n    // Room size pot\n    this.roomSizePot = new LinearPot(\n      (value: number) => this.model.setRoomSize(value),\n      'room',\n      10,\n      0,\n      10\n    );\n    \n    // Mix pot (dry/wet balance)\n    this.mixPot = new LinearPot(\n      (value: number) => this.model.setMix(value),\n      'mix',\n      1,\n      0,\n      1\n    );\n    \n    // Brightness pot\n    this.brightnessPot = new LinearPot(\n      (value: number) => this.model.setBrightness(value),\n      'tone',\n      10,\n      0,\n      10\n    );\n    \n    // Add to pots array\n    this.pots.push(this.roomSizePot, this.mixPot, this.brightnessPot);\n    \n    // Set default values\n    this.roomSizePot.setActualValue(5); // Medium room\n    this.mixPot.setActualValue(0.3); // 30% mix\n    this.brightnessPot.setActualValue(5); // Medium brightness\n  }\n\n  /**\n   * Sets the room size\n   */\n  setRoomSize(value: number): void {\n    this.roomSizePot.setActualValue(value);\n  }\n\n  /**\n   * Sets the mix (overrides setLevel for compatibility)\n   */\n  setLevel(value: number): void {\n    // Map 0-10 to 0-1 for mix\n    this.mixPot.setActualValue(value / 10);\n  }\n\n  /**\n   * Sets the brightness\n   */\n  setBrightness(value: number): void {\n    this.brightnessPot.setActualValue(value);\n  }\n\n  /**\n   * Loads a custom impulse response\n   */\n  async loadImpulse(url: string): Promise<void> {\n    await this.model.loadImpulse(url);\n  }\n}\n","/**\n * Volume pedal model - simple gain control\n */\n\nimport { BoxModel } from '../BoxModel';\n\nexport class VolumeModel extends BoxModel {\n  constructor(context: AudioContext) {\n    super(context);\n    \n    // Volume pedal only has the level gain node\n    // No additional effects needed\n    this.effects = [this.level];\n  }\n\n  /**\n   * Sets the volume (0-10 range)\n   */\n  setVolume(value: number): void {\n    this.setLevel(value);\n  }\n\n  /**\n   * Gets the current volume\n   */\n  getVolume(): number {\n    return this.level.gain.value * 10;\n  }\n}\n","/**\n * Volume pedal - simple volume control\n */\n\nimport { Box } from '../Box';\nimport { VolumeModel } from './VolumeModel';\n\nexport class Volume extends Box {\n  declare protected model: VolumeModel;\n  public readonly name = 'volume';\n\n  constructor(context: AudioContext) {\n    super(context, VolumeModel);\n  }\n\n  /**\n   * Creates the pots for this pedal\n   */\n  protected createPots(): void {\n    // Volume pedal only has the main volume pot\n    super.createPots();\n    \n    // Set default to full volume\n    this.volumePot.setActualValue(10);\n  }\n\n  /**\n   * Sets the volume\n   */\n  setVolume(value: number): void {\n    this.volumePot.setActualValue(value);\n  }\n\n  /**\n   * Gets the volume\n   */\n  getVolume(): number {\n    return this.volumePot.getValue();\n  }\n}\n","/**\n * Cabinet simulator model - simulates guitar cabinet frequency response\n */\n\nimport { BoxModel } from '../BoxModel';\n\nexport class CabinetModel extends BoxModel {\n  private lowShelf: BiquadFilterNode;\n  private highShelf: BiquadFilterNode;\n  private midPeak: BiquadFilterNode;\n  private lowPass: BiquadFilterNode;\n  private highPass: BiquadFilterNode;\n  private cabinetType: 'vintage' | 'modern' | 'british' | 'custom' = 'vintage';\n\n  constructor(context: AudioContext) {\n    super(context);\n    \n    // Create EQ filters to simulate cabinet response\n    this.highPass = this.context.createBiquadFilter();\n    this.highPass.type = 'highpass';\n    this.highPass.frequency.value = 80; // Remove sub-bass\n    this.highPass.Q.value = 0.7;\n    \n    this.lowShelf = this.context.createBiquadFilter();\n    this.lowShelf.type = 'lowshelf';\n    this.lowShelf.frequency.value = 200;\n    this.lowShelf.gain.value = -2;\n    \n    this.midPeak = this.context.createBiquadFilter();\n    this.midPeak.type = 'peaking';\n    this.midPeak.frequency.value = 800;\n    this.midPeak.Q.value = 0.5;\n    this.midPeak.gain.value = 3;\n    \n    this.highShelf = this.context.createBiquadFilter();\n    this.highShelf.type = 'highshelf';\n    this.highShelf.frequency.value = 3000;\n    this.highShelf.gain.value = -4;\n    \n    this.lowPass = this.context.createBiquadFilter();\n    this.lowPass.type = 'lowpass';\n    this.lowPass.frequency.value = 5000; // Cabinet roll-off\n    this.lowPass.Q.value = 0.7;\n    \n    // Set up effects chain\n    this.effects = [\n      this.highPass,\n      this.lowShelf,\n      this.midPeak,\n      this.highShelf,\n      this.lowPass,\n      this.level\n    ];\n    \n    // Apply default vintage cabinet settings\n    this.setCabinetType('vintage');\n  }\n\n  /**\n   * Sets the cabinet type with predefined EQ curves\n   */\n  setCabinetType(type: 'vintage' | 'modern' | 'british' | 'custom'): void {\n    this.cabinetType = type;\n    \n    switch (type) {\n      case 'vintage':\n        // Warm, mid-focused vintage tone\n        this.highPass.frequency.value = 80;\n        this.lowShelf.frequency.value = 200;\n        this.lowShelf.gain.value = -2;\n        this.midPeak.frequency.value = 800;\n        this.midPeak.gain.value = 3;\n        this.highShelf.frequency.value = 3000;\n        this.highShelf.gain.value = -4;\n        this.lowPass.frequency.value = 5000;\n        break;\n        \n      case 'modern':\n        // Scooped mids, extended highs and lows\n        this.highPass.frequency.value = 60;\n        this.lowShelf.frequency.value = 150;\n        this.lowShelf.gain.value = 2;\n        this.midPeak.frequency.value = 500;\n        this.midPeak.gain.value = -3;\n        this.highShelf.frequency.value = 4000;\n        this.highShelf.gain.value = 2;\n        this.lowPass.frequency.value = 8000;\n        break;\n        \n      case 'british':\n        // Aggressive mids, tight bass\n        this.highPass.frequency.value = 100;\n        this.lowShelf.frequency.value = 250;\n        this.lowShelf.gain.value = -3;\n        this.midPeak.frequency.value = 1200;\n        this.midPeak.gain.value = 5;\n        this.highShelf.frequency.value = 2500;\n        this.highShelf.gain.value = -2;\n        this.lowPass.frequency.value = 6000;\n        break;\n        \n      case 'custom':\n        // User-defined, start with flat response\n        this.highPass.frequency.value = 20;\n        this.lowShelf.gain.value = 0;\n        this.midPeak.gain.value = 0;\n        this.highShelf.gain.value = 0;\n        this.lowPass.frequency.value = 20000;\n        break;\n    }\n  }\n\n  /**\n   * Sets the bass response\n   */\n  setBass(value: number): void {\n    // Map 0-10 to -10 to +10 dB\n    value = Math.max(0, Math.min(10, value));\n    this.lowShelf.gain.value = (value - 5) * 2;\n  }\n\n  /**\n   * Sets the mid response\n   */\n  setMid(value: number): void {\n    // Map 0-10 to -10 to +10 dB\n    value = Math.max(0, Math.min(10, value));\n    this.midPeak.gain.value = (value - 5) * 2;\n  }\n\n  /**\n   * Sets the treble response\n   */\n  setTreble(value: number): void {\n    // Map 0-10 to -10 to +10 dB\n    value = Math.max(0, Math.min(10, value));\n    this.highShelf.gain.value = (value - 5) * 2;\n  }\n\n  /**\n   * Sets the presence (high frequency emphasis)\n   */\n  setPresence(value: number): void {\n    // Map 0-10 to 3000-8000 Hz\n    value = Math.max(0, Math.min(10, value));\n    this.lowPass.frequency.value = 3000 + (value * 500);\n  }\n\n  /**\n   * Gets the current cabinet type\n   */\n  getCabinetType(): string {\n    return this.cabinetType;\n  }\n}\n","/**\n * Cabinet simulator pedal - simulates guitar cabinet\n */\n\nimport { Box } from '../Box';\nimport { CabinetModel } from './CabinetModel';\nimport { LinearPot } from '../../controls/pots/LinearPot';\n\nexport class Cabinet extends Box {\n  declare protected model: CabinetModel;\n  public readonly name = 'cabinet';\n  \n  private bassPot!: LinearPot;\n  private midPot!: LinearPot;\n  private treblePot!: LinearPot;\n  private presencePot!: LinearPot;\n\n  constructor(context: AudioContext) {\n    super(context, CabinetModel);\n  }\n\n  /**\n   * Creates the pots for this pedal\n   */\n  protected createPots(): void {\n    super.createPots();\n    \n    // Bass EQ\n    this.bassPot = new LinearPot(\n      (value: number) => this.model.setBass(value),\n      'bass',\n      10,\n      0,\n      10\n    );\n    \n    // Mid EQ\n    this.midPot = new LinearPot(\n      (value: number) => this.model.setMid(value),\n      'mid',\n      10,\n      0,\n      10\n    );\n    \n    // Treble EQ\n    this.treblePot = new LinearPot(\n      (value: number) => this.model.setTreble(value),\n      'treble',\n      10,\n      0,\n      10\n    );\n    \n    // Presence\n    this.presencePot = new LinearPot(\n      (value: number) => this.model.setPresence(value),\n      'presence',\n      10,\n      0,\n      10\n    );\n    \n    // Add to pots array\n    this.pots.push(this.bassPot, this.midPot, this.treblePot, this.presencePot);\n    \n    // Set default values (neutral EQ)\n    this.bassPot.setActualValue(5);\n    this.midPot.setActualValue(5);\n    this.treblePot.setActualValue(5);\n    this.presencePot.setActualValue(5);\n  }\n\n  /**\n   * Sets the cabinet type\n   */\n  setCabinetType(type: 'vintage' | 'modern' | 'british' | 'custom'): void {\n    this.model.setCabinetType(type);\n  }\n\n  /**\n   * Sets the bass EQ\n   */\n  setBass(value: number): void {\n    this.bassPot.setActualValue(value);\n  }\n\n  /**\n   * Sets the mid EQ\n   */\n  setMid(value: number): void {\n    this.midPot.setActualValue(value);\n  }\n\n  /**\n   * Sets the treble EQ\n   */\n  setTreble(value: number): void {\n    this.treblePot.setActualValue(value);\n  }\n\n  /**\n   * Sets the presence\n   */\n  setPresence(value: number): void {\n    this.presencePot.setActualValue(value);\n  }\n}\n","/**\n * Momentary switch - only active while pressed\n */\n\nimport { Switch } from './Switch';\n\nexport class MomentarySwitch extends Switch {\n  private pressTimer?: NodeJS.Timeout;\n\n  /**\n   * Presses the switch (turns on)\n   */\n  press(): void {\n    this.setState(true);\n  }\n\n  /**\n   * Releases the switch (turns off)\n   */\n  release(): void {\n    this.setState(false);\n  }\n\n  /**\n   * Toggles momentarily (press and release after delay)\n   */\n  toggle(): void {\n    if (this.pressTimer) {\n      clearTimeout(this.pressTimer);\n    }\n    \n    this.press();\n    \n    // Auto-release after 100ms if not manually released\n    this.pressTimer = setTimeout(() => {\n      this.release();\n    }, 100);\n  }\n\n  /**\n   * Returns true as this is a momentary switch\n   */\n  isMomentary(): boolean {\n    return true;\n  }\n\n  /**\n   * Cleanup\n   */\n  dispose(): void {\n    if (this.pressTimer) {\n      clearTimeout(this.pressTimer);\n    }\n  }\n}\n","/**\n * Pedalboard.js - Modern TypeScript library for guitar effects\n * @version 2.0.0\n */\n\n// Core\nexport { Stage } from './core/Stage';\nexport { Board } from './core/Board';\nexport { Connectable } from './core/Connectable';\nexport { ConnectableModel } from './core/ConnectableModel';\n\n// Pedals\nexport { Box } from './pedals/Box';\nexport { BoxModel } from './pedals/BoxModel';\nexport { Overdrive } from './pedals/overdrive/Overdrive';\nexport { OverdriveModel } from './pedals/overdrive/OverdriveModel';\nexport { Delay } from './pedals/delay/Delay';\nexport { DelayModel } from './pedals/delay/DelayModel';\nexport { Reverb } from './pedals/reverb/Reverb';\nexport { ReverbModel } from './pedals/reverb/ReverbModel';\nexport { Volume } from './pedals/volume/Volume';\nexport { VolumeModel } from './pedals/volume/VolumeModel';\nexport { Cabinet } from './pedals/cabinet/Cabinet';\nexport { CabinetModel } from './pedals/cabinet/CabinetModel';\n\n// Controls\nexport { Pot } from './controls/pots/Pot';\nexport { LinearPot } from './controls/pots/LinearPot';\nexport { LogPot } from './controls/pots/LogPot';\nexport { Switch } from './controls/switches/Switch';\nexport { ToggleSwitch } from './controls/switches/ToggleSwitch';\nexport { MomentarySwitch } from './controls/switches/MomentarySwitch';\nexport { Led } from './controls/Led';\n\n// IO\nexport { Input } from './io/Input';\nexport { FileInput } from './io/FileInput';\nexport { StreamInput } from './io/StreamInput';\nexport { Output } from './io/Output';\n\n// Utils\nexport { EventEmitter } from './utils/EventEmitter';\n\n// Types\nexport * from './types';\n\n// Default export for convenience\nimport { Stage } from './core/Stage';\nimport { Board } from './core/Board';\nimport { Overdrive } from './pedals/overdrive/Overdrive';\nimport { Delay } from './pedals/delay/Delay';\nimport { Reverb } from './pedals/reverb/Reverb';\nimport { Volume } from './pedals/volume/Volume';\nimport { Cabinet } from './pedals/cabinet/Cabinet';\n\nexport default {\n  Stage,\n  Board,\n  pedals: {\n    Overdrive,\n    Delay,\n    Reverb,\n    Volume,\n    Cabinet\n  }\n};\n"]}